{
  "address": "0x06eA28a8ADf22736778A54802CeEbcBeC14B3B34",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAdded",
          "type": "bool"
        }
      ],
      "name": "LiquidityAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b1a21808add91187715067d83f1871dbd525ae9518c7735ce17295764a20634",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "976500",
    "logsBloom": "0x
    "blockHash": "0xd99dff246d9559884b4c56f42ce6e0c8e7a4a0b4a671f20c591ccea397c2a592",
    "transactionHash": "0x4b1a21808add91187715067d83f1871dbd525ae9518c7735ce17295764a20634",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "976500",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa5db2398fc7215775125d1376a2111e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"}],\"name\":\"LiquidityAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eduardo Moreno - Optimized Version\",\"custom:security-contact\":\"eduardomoreno2503@gmail.com\",\"details\":\"Implements constant product formula x * y = k without any fees using structs for gas optimization\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountADesired\":\"Amount of first token to add\",\"amountAMin\":\"Minimum amount of first token to add\",\"amountBDesired\":\"Amount of second token to add\",\"amountBMin\":\"Minimum amount of second token to add\",\"deadline\":\"Maximum timestamp until which the transaction is valid\",\"to\":\"Address that will receive the liquidity tokens\",\"tokenA\":\"Address of the first token\",\"tokenB\":\"Address of the second token\"},\"returns\":{\"amountA\":\"The actual amount of first token added\",\"amountB\":\"The actual amount of second token added\",\"liquidity\":\"The amount of liquidity tokens minted\"}},\"getAmountOut(uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Amount of input tokens\",\"reserveIn\":\"Reserve of input token\",\"reserveOut\":\"Reserve of output token\"},\"returns\":{\"_0\":\"amountOut Amount of output tokens to receive\"}},\"getPrice(address,address)\":{\"params\":{\"tokenA\":\"Address of the first token\",\"tokenB\":\"Address of the second token  \"},\"returns\":{\"price\":\"Price of tokenA in terms of tokenB\"}},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"Minimum amount of first token to receive\",\"amountBMin\":\"Minimum amount of second token to receive\",\"deadline\":\"Maximum timestamp until which the transaction is valid\",\"liquidity\":\"Amount of liquidity tokens to burn\",\"to\":\"Address that will receive the tokens\",\"tokenA\":\"Address of the first token\",\"tokenB\":\"Address of the second token\"},\"returns\":{\"amountA\":\"The amount of first token returned\",\"amountB\":\"The amount of second token returned\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"details\":\"Modified to match verifier interface (no return value)\",\"params\":{\"amountIn\":\"Amount of input tokens to swap\",\"amountOutMin\":\"Minimum amount of output tokens to receive\",\"deadline\":\"Maximum timestamp until which the transaction is valid\",\"path\":\"Array containing [tokenIn, tokenOut] addresses\",\"to\":\"Address that will receive the output tokens\"}}},\"stateVariables\":{\"liquidityBalances\":{\"details\":\"Maps pair hash => user => liquidity balance\"},\"pairs\":{\"details\":\"Uses keccak256(abi.encodePacked(tokenA, tokenB)) as key for deterministic ordering\"}},\"title\":\"SimpleSwap\",\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAction(address,address,uint256,uint256,uint256,bool)\":{\"notice\":\"Emitted when liquidity is added or removed\"},\"Swap(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are swapped\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to a token pair pool\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates the output amount for a swap\"},\"getPrice(address,address)\":{\"notice\":\"Gets the current price of tokenA in terms of tokenB\"},\"getReserves(address,address)\":{\"notice\":\"Gets reserve amounts for a token pair\"},\"liquidityBalances(bytes32,address)\":{\"notice\":\"Stores liquidity token balances for each user in each pair\"},\"pairs(bytes32)\":{\"notice\":\"Maps token pair hash to pair data\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from a token pair pool\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps exact amount of input tokens for output tokens - VERIFIER COMPATIBLE\"}},\"notice\":\"An optimized automated market maker (AMM) for token swapping without fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleSwap.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2025-07-05\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @title SimpleSwap\\r\\n * @notice An optimized automated market maker (AMM) for token swapping without fees\\r\\n * @dev Implements constant product formula x * y = k without any fees using structs for gas optimization\\r\\n * @author Eduardo Moreno - Optimized Version\\r\\n * @custom:security-contact eduardomoreno2503@gmail.com\\r\\n */\\r\\ncontract SimpleSwap {\\r\\n    \\r\\n    /// @notice Struct to store all reserve and liquidity data for a trading pair\\r\\n    /// @dev Packs related data together to minimize storage slots and gas costs\\r\\n    struct PairData {\\r\\n        uint256 reserveA;           // Reserve of tokenA\\r\\n        uint256 reserveB;           // Reserve of tokenB\\r\\n        uint256 totalLiquidity;     // Total liquidity tokens issued\\r\\n    }\\r\\n    \\r\\n    /// @notice Struct to cache storage values during function execution\\r\\n    /// @dev Used to minimize storage reads/writes within functions\\r\\n    struct LocalPairData {\\r\\n        uint256 reserveA;\\r\\n        uint256 reserveB;\\r\\n        uint256 totalLiquidity;\\r\\n        bool isFirstProvision;\\r\\n    }\\r\\n    \\r\\n    /// @notice Maps token pair hash to pair data\\r\\n    /// @dev Uses keccak256(abi.encodePacked(tokenA, tokenB)) as key for deterministic ordering\\r\\n    mapping(bytes32 => PairData) public pairs;\\r\\n    \\r\\n    /// @notice Stores liquidity token balances for each user in each pair\\r\\n    /// @dev Maps pair hash => user => liquidity balance\\r\\n    mapping(bytes32 => mapping(address => uint256)) public liquidityBalances;\\r\\n\\r\\n    /// @notice Emitted when tokens are swapped\\r\\n    event Swap(address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\r\\n\\r\\n    /// @notice Emitted when liquidity is added or removed\\r\\n    event LiquidityAction(address indexed tokenA, address indexed tokenB, uint256 amountA, uint256 amountB, uint256 liquidity, bool isAdded);\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to get deterministic pair hash\\r\\n     * @dev Ensures consistent ordering regardless of input order\\r\\n     */\\r\\n    function _getPairHash(address tokenA, address tokenB) internal pure returns (bytes32, bool) {\\r\\n        if (tokenA < tokenB) {\\r\\n            return (keccak256(abi.encodePacked(tokenA, tokenB)), false);\\r\\n        } else {\\r\\n            return (keccak256(abi.encodePacked(tokenB, tokenA)), true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to load pair data from storage (single read)\\r\\n     * @dev Reads all pair data in one storage access to minimize gas costs\\r\\n     */\\r\\n    function _loadPairData(address tokenA, address tokenB) internal view returns (LocalPairData memory localData, bytes32 pairHash, bool reversed) {\\r\\n        (pairHash, reversed) = _getPairHash(tokenA, tokenB);\\r\\n        PairData storage pairData = pairs[pairHash];\\r\\n        \\r\\n        if (reversed) {\\r\\n            localData = LocalPairData({\\r\\n                reserveA: pairData.reserveB,\\r\\n                reserveB: pairData.reserveA,\\r\\n                totalLiquidity: pairData.totalLiquidity,\\r\\n                isFirstProvision: pairData.totalLiquidity == 0\\r\\n            });\\r\\n        } else {\\r\\n            localData = LocalPairData({\\r\\n                reserveA: pairData.reserveA,\\r\\n                reserveB: pairData.reserveB,\\r\\n                totalLiquidity: pairData.totalLiquidity,\\r\\n                isFirstProvision: pairData.totalLiquidity == 0\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to save pair data to storage (single write)\\r\\n     * @dev Updates all pair data in one storage access to minimize gas costs\\r\\n     */\\r\\n    function _savePairData(bytes32 pairHash, bool reversed, LocalPairData memory localData) internal {\\r\\n        PairData storage pairData = pairs[pairHash];\\r\\n        \\r\\n        if (reversed) {\\r\\n            pairData.reserveA = localData.reserveB;\\r\\n            pairData.reserveB = localData.reserveA;\\r\\n        } else {\\r\\n            pairData.reserveA = localData.reserveA;\\r\\n            pairData.reserveB = localData.reserveB;\\r\\n        }\\r\\n        pairData.totalLiquidity = localData.totalLiquidity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to calculate liquidity tokens to mint\\r\\n     * @dev Uses sqrt of product for first provision, proportional for subsequent ones\\r\\n     */\\r\\n    function _calculateLiquidity(\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        LocalPairData memory localData\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (localData.isFirstProvision) {\\r\\n            return _sqrt(amountA * amountB);\\r\\n        }\\r\\n        return _min(\\r\\n            (amountA * localData.totalLiquidity) / localData.reserveA,\\r\\n            (amountB * localData.totalLiquidity) / localData.reserveB\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds liquidity to a token pair pool\\r\\n     * @param tokenA Address of the first token\\r\\n     * @param tokenB Address of the second token\\r\\n     * @param amountADesired Amount of first token to add\\r\\n     * @param amountBDesired Amount of second token to add\\r\\n     * @param amountAMin Minimum amount of first token to add\\r\\n     * @param amountBMin Minimum amount of second token to add\\r\\n     * @param to Address that will receive the liquidity tokens\\r\\n     * @param deadline Maximum timestamp until which the transaction is valid\\r\\n     * @return amountA The actual amount of first token added\\r\\n     * @return amountB The actual amount of second token added\\r\\n     * @return liquidity The amount of liquidity tokens minted\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\r\\n        require(block.timestamp <= deadline, \\\"EXPIRED\\\");\\r\\n        require(amountADesired >= amountAMin && amountBDesired >= amountBMin, \\\"INSUFFICIENT_AMOUNT\\\");\\r\\n\\r\\n        (LocalPairData memory data, bytes32 hash, bool rev) = _loadPairData(tokenA, tokenB);\\r\\n        \\r\\n        liquidity = _calculateLiquidity(amountADesired, amountBDesired, data);\\r\\n\\r\\n        _transferFrom(tokenA, msg.sender, address(this), amountADesired);\\r\\n        _transferFrom(tokenB, msg.sender, address(this), amountBDesired);\\r\\n\\r\\n        data.reserveA += amountADesired;\\r\\n        data.reserveB += amountBDesired;\\r\\n        data.totalLiquidity += liquidity;\\r\\n\\r\\n        _savePairData(hash, rev, data);\\r\\n        liquidityBalances[hash][to] += liquidity;\\r\\n\\r\\n        emit LiquidityAction(tokenA, tokenB, amountADesired, amountBDesired, liquidity, true);\\r\\n        return (amountADesired, amountBDesired, liquidity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from a token pair pool\\r\\n     * @param tokenA Address of the first token\\r\\n     * @param tokenB Address of the second token\\r\\n     * @param liquidity Amount of liquidity tokens to burn\\r\\n     * @param amountAMin Minimum amount of first token to receive\\r\\n     * @param amountBMin Minimum amount of second token to receive\\r\\n     * @param to Address that will receive the tokens\\r\\n     * @param deadline Maximum timestamp until which the transaction is valid\\r\\n     * @return amountA The amount of first token returned\\r\\n     * @return amountB The amount of second token returned\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB) {\\r\\n        require(block.timestamp <= deadline, \\\"EXPIRED\\\");\\r\\n\\r\\n        (LocalPairData memory data, bytes32 hash, bool rev) = _loadPairData(tokenA, tokenB);\\r\\n        \\r\\n        amountA = (liquidity * data.reserveA) / data.totalLiquidity;\\r\\n        amountB = (liquidity * data.reserveB) / data.totalLiquidity;\\r\\n        require(amountA >= amountAMin && amountB >= amountBMin, \\\"INSUFFICIENT_AMOUNT\\\");\\r\\n        require(liquidityBalances[hash][msg.sender] >= liquidity, \\\"INSUFFICIENT_LIQUIDITY\\\");\\r\\n\\r\\n        data.reserveA -= amountA;\\r\\n        data.reserveB -= amountB;\\r\\n        data.totalLiquidity -= liquidity;\\r\\n\\r\\n        _savePairData(hash, rev, data);\\r\\n        liquidityBalances[hash][msg.sender] -= liquidity;\\r\\n\\r\\n        _transfer(tokenA, to, amountA);\\r\\n        _transfer(tokenB, to, amountB);\\r\\n\\r\\n        emit LiquidityAction(tokenA, tokenB, amountA, amountB, liquidity, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps exact amount of input tokens for output tokens - VERIFIER COMPATIBLE\\r\\n     * @dev Modified to match verifier interface (no return value)\\r\\n     * @param amountIn Amount of input tokens to swap\\r\\n     * @param amountOutMin Minimum amount of output tokens to receive\\r\\n     * @param path Array containing [tokenIn, tokenOut] addresses\\r\\n     * @param to Address that will receive the output tokens\\r\\n     * @param deadline Maximum timestamp until which the transaction is valid\\r\\n     */\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external {\\r\\n        require(block.timestamp <= deadline, \\\"EXPIRED\\\");\\r\\n        require(path.length == 2, \\\"INVALID_PATH\\\");\\r\\n\\r\\n        (LocalPairData memory data, bytes32 hash, bool rev) = _loadPairData(path[0], path[1]);\\r\\n        \\r\\n        uint256 amountOut = getAmountOut(amountIn, data.reserveA, data.reserveB);\\r\\n        require(amountOut >= amountOutMin, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n\\r\\n        _transferFrom(path[0], msg.sender, address(this), amountIn);\\r\\n\\r\\n        data.reserveA += amountIn;\\r\\n        data.reserveB -= amountOut;\\r\\n\\r\\n        _savePairData(hash, rev, data);\\r\\n        _transfer(path[1], to, amountOut);\\r\\n\\r\\n        emit Swap(path[0], path[1], amountIn, amountOut);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current price of tokenA in terms of tokenB\\r\\n     * @param tokenA Address of the first token\\r\\n     * @param tokenB Address of the second token  \\r\\n     * @return price Price of tokenA in terms of tokenB\\r\\n     */\\r\\n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price) {\\r\\n        (LocalPairData memory data,,) = _loadPairData(tokenA, tokenB);\\r\\n        return (data.reserveB * 1e18) / data.reserveA;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets reserve amounts for a token pair\\r\\n     */\\r\\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB) {\\r\\n        (LocalPairData memory data,,) = _loadPairData(tokenA, tokenB);\\r\\n        return (data.reserveA, data.reserveB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the output amount for a swap\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param reserveIn Reserve of input token\\r\\n     * @param reserveOut Reserve of output token\\r\\n     * @return amountOut Amount of output tokens to receive\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) public pure returns (uint256) {\\r\\n        require(amountIn > 0 && reserveIn > 0 && reserveOut > 0, \\\"INVALID_AMOUNTS\\\");\\r\\n        return (amountIn * reserveOut) / (reserveIn + amountIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to handle transferFrom operations\\r\\n     */\\r\\n    function _transferFrom(address token, address from, address to, uint256 amount) internal {\\r\\n        (bool success,) = token.call(\\r\\n            abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", from, to, amount)\\r\\n        );\\r\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to handle transfer operations\\r\\n     */\\r\\n    function _transfer(address token, address to, uint256 amount) internal {\\r\\n        (bool success,) = token.call(\\r\\n            abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount)\\r\\n        );\\r\\n        require(success, \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to calculate square root\\r\\n     */\\r\\n    function _sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to return the minimum of two numbers\\r\\n     */\\r\\n    function _min(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return x < y ? x : y;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0ff9321bb108a4fd308485094a65e8661fa1137459faed4b65c3958feb640462\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506110b3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac41865a1161005b578063ac41865a1461013d578063baa2abde14610150578063d52bb6f414610178578063e8e337001461018b57600080fd5b8063054d50d41461008d57806338ed1739146100b35780634fb5bf7f146100c8578063673e0481146100f3575b600080fd5b6100a061009b366004610d55565b61019e565b6040519081526020015b60405180910390f35b6100c66100c1366004610d98565b610226565b005b6100a06100d6366004610e3a565b600160209081526000928352604080842090915290825290205481565b610122610101366004610e66565b60006020819052908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016100aa565b6100a061014b366004610e7f565b61049b565b61016361015e366004610ea9565b6104db565b604080519283526020830191909152016100aa565b610163610186366004610e7f565b610703565b610122610199366004610f13565b61072a565b600080841180156101af5750600083115b80156101bb5750600082115b6101fe5760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f414d4f554e545360881b60448201526064015b60405180910390fd5b6102088484610f9d565b6102128386610fb0565b61021c9190610fc7565b90505b9392505050565b804211156102465760405162461bcd60e51b81526004016101f590610fe9565b600283146102855760405162461bcd60e51b815260206004820152600c60248201526b0929cac82989288bea082a8960a31b60448201526064016101f5565b60008060006102e2878760008181106102a0576102a061100a565b90506020020160208101906102b59190611020565b888860018181106102c8576102c861100a565b90506020020160208101906102dd9190611020565b6108e1565b92509250925060006102fd8a8560000151866020015161019e565b90508881101561034f5760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e5400000000000060448201526064016101f5565b610382888860008181106103655761036561100a565b905060200201602081019061037a9190611020565b33308d61099a565b89846000018181516103949190610f9d565b9052506020840180518291906103ab90839061103b565b9052506103b9838386610a8c565b6103eb888860018181106103cf576103cf61100a565b90506020020160208101906103e49190611020565b8783610ad2565b878760018181106103fe576103fe61100a565b90506020020160208101906104139190611020565b6001600160a01b03168888600081811061042f5761042f61100a565b90506020020160208101906104449190611020565b6001600160a01b03167ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358c84604051610487929190918252602082015260400190565b60405180910390a350505050505050505050565b6000806104a884846108e1565b505080516020820151919250906104c790670de0b6b3a7640000610fb0565b6104d19190610fc7565b9150505b92915050565b600080824211156104fe5760405162461bcd60e51b81526004016101f590610fe9565b600080600061050d8c8c6108e1565b925092509250826040015183600001518b6105289190610fb0565b6105329190610fc7565b9450826040015183602001518b6105499190610fb0565b6105539190610fc7565b93508885101580156105655750878410155b6105a75760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b60448201526064016101f5565b60008281526001602090815260408083203384529091529020548a11156106095760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b60448201526064016101f5565b848360000181815161061b919061103b565b90525060208301805185919061063290839061103b565b9052506040830180518b919061064990839061103b565b905250610657828285610a8c565b6000828152600160209081526040808320338452909152812080548c929061068090849061103b565b9091555061069190508c8887610ad2565b61069c8b8886610ad2565b60408051868152602081018690529081018b9052600060608201526001600160a01b03808d1691908e16907fc5e67c7ae420081af6dc91dd07066f572593e63310dab226cf38c43fdb15026a9060800160405180910390a350505097509795505050505050565b600080600061071285856108e1565b505080516020909101519093509150505b9250929050565b60008060008342111561074f5760405162461bcd60e51b81526004016101f590610fe9565b86891015801561075f5750858810155b6107a15760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b60448201526064016101f5565b60008060006107b08e8e6108e1565b9250925092506107c18c8c85610bb6565b93506107cf8e33308f61099a565b6107db8d33308e61099a565b8b836000018181516107ed9190610f9d565b9052506020830180518c9190610804908390610f9d565b90525060408301805185919061081b908390610f9d565b905250610829828285610a8c565b60008281526001602090815260408083206001600160a01b038c1684529091528120805486929061085b908490610f9d565b925050819055508c6001600160a01b03168e6001600160a01b03167fc5e67c7ae420081af6dc91dd07066f572593e63310dab226cf38c43fdb15026a8e8e8860016040516108c49493929190938452602084019290925260408301521515606082015260800190565b60405180910390a350999c989b5090995096975050505050505050565b61090e60405180608001604052806000815260200160008152602001600081526020016000151581525090565b60008061091b8585610c1e565b600082815260208190526040902091935091508115610965576040805160808101825260018301548152825460208201526002830154918101829052901560608201529350610992565b60408051608081018252825481526001830154602082015260028301549181018290529015606082015293505b509250925092565b6040516001600160a01b0384811660248301528381166044830152606482018390526000919086169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516109fb919061104e565b6000604051808303816000865af19150503d8060008114610a38576040519150601f19603f3d011682016040523d82523d6000602084013e610a3d565b606091505b5050905080610a855760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016101f5565b5050505050565b60008381526020819052604090208215610ab3576020820151815581516001820155610ac2565b81518155602082015160018201555b6040909101516002909101555050565b6040516001600160a01b038381166024830152604482018390526000919085169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b17905251610b2b919061104e565b6000604051808303816000865af19150503d8060008114610b68576040519150601f19603f3d011682016040523d82523d6000602084013e610b6d565b606091505b5050905080610bb05760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016101f5565b50505050565b6000816060015115610bdb57610bd4610bcf8486610fb0565b610ccf565b905061021f565b8151604083015161021c9190610bf19087610fb0565b610bfb9190610fc7565b60208401516040850151610c0f9087610fb0565b610c199190610fc7565b610d3f565b600080826001600160a01b0316846001600160a01b03161015610c85576040516bffffffffffffffffffffffff19606086811b8216602084015285901b16603482015260480160405160208183030381529060405280519060200120600091509150610723565b6040516bffffffffffffffffffffffff19606085811b8216602084015286901b16603482015260480160405160208183030381529060405280519060200120600191509150610723565b60006003821115610d305750806000610ce9600283610fc7565b610cf4906001610f9d565b90505b81811015610d2a57905080600281610d0f8186610fc7565b610d199190610f9d565b610d239190610fc7565b9050610cf7565b50919050565b8115610d3a575060015b919050565b6000818310610d4e578161021f565b5090919050565b600080600060608486031215610d6a57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b0381168114610d3a57600080fd5b60008060008060008060a08789031215610db157600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610dd757600080fd5b818901915089601f830112610deb57600080fd5b813581811115610dfa57600080fd5b8a60208260051b8501011115610e0f57600080fd5b602083019650809550505050610e2760608801610d81565b9150608087013590509295509295509295565b60008060408385031215610e4d57600080fd5b82359150610e5d60208401610d81565b90509250929050565b600060208284031215610e7857600080fd5b5035919050565b60008060408385031215610e9257600080fd5b610e9b83610d81565b9150610e5d60208401610d81565b600080600080600080600060e0888a031215610ec457600080fd5b610ecd88610d81565b9650610edb60208901610d81565b9550604088013594506060880135935060808801359250610efe60a08901610d81565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610f3057600080fd5b610f3989610d81565b9750610f4760208a01610d81565b965060408901359550606089013594506080890135935060a08901359250610f7160c08a01610d81565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b808201808211156104d5576104d5610f87565b80820281158282048414176104d5576104d5610f87565b600082610fe457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600790820152661156141254915160ca1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561103257600080fd5b61021f82610d81565b818103818111156104d5576104d5610f87565b6000825160005b8181101561106f5760208186018101518583015201611055565b50600092019182525091905056fea264697066735822122066047b2585a707f1f4ec5bee7a98df11ddf0f2ed9e1fe5d87bbd7d862e7c5a2b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac41865a1161005b578063ac41865a1461013d578063baa2abde14610150578063d52bb6f414610178578063e8e337001461018b57600080fd5b8063054d50d41461008d57806338ed1739146100b35780634fb5bf7f146100c8578063673e0481146100f3575b600080fd5b6100a061009b366004610d55565b61019e565b6040519081526020015b60405180910390f35b6100c66100c1366004610d98565b610226565b005b6100a06100d6366004610e3a565b600160209081526000928352604080842090915290825290205481565b610122610101366004610e66565b60006020819052908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016100aa565b6100a061014b366004610e7f565b61049b565b61016361015e366004610ea9565b6104db565b604080519283526020830191909152016100aa565b610163610186366004610e7f565b610703565b610122610199366004610f13565b61072a565b600080841180156101af5750600083115b80156101bb5750600082115b6101fe5760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f414d4f554e545360881b60448201526064015b60405180910390fd5b6102088484610f9d565b6102128386610fb0565b61021c9190610fc7565b90505b9392505050565b804211156102465760405162461bcd60e51b81526004016101f590610fe9565b600283146102855760405162461bcd60e51b815260206004820152600c60248201526b0929cac82989288bea082a8960a31b60448201526064016101f5565b60008060006102e2878760008181106102a0576102a061100a565b90506020020160208101906102b59190611020565b888860018181106102c8576102c861100a565b90506020020160208101906102dd9190611020565b6108e1565b92509250925060006102fd8a8560000151866020015161019e565b90508881101561034f5760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e5400000000000060448201526064016101f5565b610382888860008181106103655761036561100a565b905060200201602081019061037a9190611020565b33308d61099a565b89846000018181516103949190610f9d565b9052506020840180518291906103ab90839061103b565b9052506103b9838386610a8c565b6103eb888860018181106103cf576103cf61100a565b90506020020160208101906103e49190611020565b8783610ad2565b878760018181106103fe576103fe61100a565b90506020020160208101906104139190611020565b6001600160a01b03168888600081811061042f5761042f61100a565b90506020020160208101906104449190611020565b6001600160a01b03167ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358c84604051610487929190918252602082015260400190565b60405180910390a350505050505050505050565b6000806104a884846108e1565b505080516020820151919250906104c790670de0b6b3a7640000610fb0565b6104d19190610fc7565b9150505b92915050565b600080824211156104fe5760405162461bcd60e51b81526004016101f590610fe9565b600080600061050d8c8c6108e1565b925092509250826040015183600001518b6105289190610fb0565b6105329190610fc7565b9450826040015183602001518b6105499190610fb0565b6105539190610fc7565b93508885101580156105655750878410155b6105a75760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b60448201526064016101f5565b60008281526001602090815260408083203384529091529020548a11156106095760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b60448201526064016101f5565b848360000181815161061b919061103b565b90525060208301805185919061063290839061103b565b9052506040830180518b919061064990839061103b565b905250610657828285610a8c565b6000828152600160209081526040808320338452909152812080548c929061068090849061103b565b9091555061069190508c8887610ad2565b61069c8b8886610ad2565b60408051868152602081018690529081018b9052600060608201526001600160a01b03808d1691908e16907fc5e67c7ae420081af6dc91dd07066f572593e63310dab226cf38c43fdb15026a9060800160405180910390a350505097509795505050505050565b600080600061071285856108e1565b505080516020909101519093509150505b9250929050565b60008060008342111561074f5760405162461bcd60e51b81526004016101f590610fe9565b86891015801561075f5750858810155b6107a15760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b60448201526064016101f5565b60008060006107b08e8e6108e1565b9250925092506107c18c8c85610bb6565b93506107cf8e33308f61099a565b6107db8d33308e61099a565b8b836000018181516107ed9190610f9d565b9052506020830180518c9190610804908390610f9d565b90525060408301805185919061081b908390610f9d565b905250610829828285610a8c565b60008281526001602090815260408083206001600160a01b038c1684529091528120805486929061085b908490610f9d565b925050819055508c6001600160a01b03168e6001600160a01b03167fc5e67c7ae420081af6dc91dd07066f572593e63310dab226cf38c43fdb15026a8e8e8860016040516108c49493929190938452602084019290925260408301521515606082015260800190565b60405180910390a350999c989b5090995096975050505050505050565b61090e60405180608001604052806000815260200160008152602001600081526020016000151581525090565b60008061091b8585610c1e565b600082815260208190526040902091935091508115610965576040805160808101825260018301548152825460208201526002830154918101829052901560608201529350610992565b60408051608081018252825481526001830154602082015260028301549181018290529015606082015293505b509250925092565b6040516001600160a01b0384811660248301528381166044830152606482018390526000919086169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516109fb919061104e565b6000604051808303816000865af19150503d8060008114610a38576040519150601f19603f3d011682016040523d82523d6000602084013e610a3d565b606091505b5050905080610a855760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016101f5565b5050505050565b60008381526020819052604090208215610ab3576020820151815581516001820155610ac2565b81518155602082015160018201555b6040909101516002909101555050565b6040516001600160a01b038381166024830152604482018390526000919085169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b17905251610b2b919061104e565b6000604051808303816000865af19150503d8060008114610b68576040519150601f19603f3d011682016040523d82523d6000602084013e610b6d565b606091505b5050905080610bb05760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016101f5565b50505050565b6000816060015115610bdb57610bd4610bcf8486610fb0565b610ccf565b905061021f565b8151604083015161021c9190610bf19087610fb0565b610bfb9190610fc7565b60208401516040850151610c0f9087610fb0565b610c199190610fc7565b610d3f565b600080826001600160a01b0316846001600160a01b03161015610c85576040516bffffffffffffffffffffffff19606086811b8216602084015285901b16603482015260480160405160208183030381529060405280519060200120600091509150610723565b6040516bffffffffffffffffffffffff19606085811b8216602084015286901b16603482015260480160405160208183030381529060405280519060200120600191509150610723565b60006003821115610d305750806000610ce9600283610fc7565b610cf4906001610f9d565b90505b81811015610d2a57905080600281610d0f8186610fc7565b610d199190610f9d565b610d239190610fc7565b9050610cf7565b50919050565b8115610d3a575060015b919050565b6000818310610d4e578161021f565b5090919050565b600080600060608486031215610d6a57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b0381168114610d3a57600080fd5b60008060008060008060a08789031215610db157600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610dd757600080fd5b818901915089601f830112610deb57600080fd5b813581811115610dfa57600080fd5b8a60208260051b8501011115610e0f57600080fd5b602083019650809550505050610e2760608801610d81565b9150608087013590509295509295509295565b60008060408385031215610e4d57600080fd5b82359150610e5d60208401610d81565b90509250929050565b600060208284031215610e7857600080fd5b5035919050565b60008060408385031215610e9257600080fd5b610e9b83610d81565b9150610e5d60208401610d81565b600080600080600080600060e0888a031215610ec457600080fd5b610ecd88610d81565b9650610edb60208901610d81565b9550604088013594506060880135935060808801359250610efe60a08901610d81565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610f3057600080fd5b610f3989610d81565b9750610f4760208a01610d81565b965060408901359550606089013594506080890135935060a08901359250610f7160c08a01610d81565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b808201808211156104d5576104d5610f87565b80820281158282048414176104d5576104d5610f87565b600082610fe457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600790820152661156141254915160ca1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561103257600080fd5b61021f82610d81565b818103818111156104d5576104d5610f87565b6000825160005b8181101561106f5760208186018101518583015201611055565b50600092019182525091905056fea264697066735822122066047b2585a707f1f4ec5bee7a98df11ddf0f2ed9e1fe5d87bbd7d862e7c5a2b64736f6c63430008140033",
  "devdoc": {
    "author": "Eduardo Moreno - Optimized Version",
    "custom:security-contact": "eduardomoreno2503@gmail.com",
    "details": "Implements constant product formula x * y = k without any fees using structs for gas optimization",
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountADesired": "Amount of first token to add",
          "amountAMin": "Minimum amount of first token to add",
          "amountBDesired": "Amount of second token to add",
          "amountBMin": "Minimum amount of second token to add",
          "deadline": "Maximum timestamp until which the transaction is valid",
          "to": "Address that will receive the liquidity tokens",
          "tokenA": "Address of the first token",
          "tokenB": "Address of the second token"
        },
        "returns": {
          "amountA": "The actual amount of first token added",
          "amountB": "The actual amount of second token added",
          "liquidity": "The amount of liquidity tokens minted"
        }
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "params": {
          "amountIn": "Amount of input tokens",
          "reserveIn": "Reserve of input token",
          "reserveOut": "Reserve of output token"
        },
        "returns": {
          "_0": "amountOut Amount of output tokens to receive"
        }
      },
      "getPrice(address,address)": {
        "params": {
          "tokenA": "Address of the first token",
          "tokenB": "Address of the second token  "
        },
        "returns": {
          "price": "Price of tokenA in terms of tokenB"
        }
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountAMin": "Minimum amount of first token to receive",
          "amountBMin": "Minimum amount of second token to receive",
          "deadline": "Maximum timestamp until which the transaction is valid",
          "liquidity": "Amount of liquidity tokens to burn",
          "to": "Address that will receive the tokens",
          "tokenA": "Address of the first token",
          "tokenB": "Address of the second token"
        },
        "returns": {
          "amountA": "The amount of first token returned",
          "amountB": "The amount of second token returned"
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "details": "Modified to match verifier interface (no return value)",
        "params": {
          "amountIn": "Amount of input tokens to swap",
          "amountOutMin": "Minimum amount of output tokens to receive",
          "deadline": "Maximum timestamp until which the transaction is valid",
          "path": "Array containing [tokenIn, tokenOut] addresses",
          "to": "Address that will receive the output tokens"
        }
      }
    },
    "stateVariables": {
      "liquidityBalances": {
        "details": "Maps pair hash => user => liquidity balance"
      },
      "pairs": {
        "details": "Uses keccak256(abi.encodePacked(tokenA, tokenB)) as key for deterministic ordering"
      }
    },
    "title": "SimpleSwap",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityAction(address,address,uint256,uint256,uint256,bool)": {
        "notice": "Emitted when liquidity is added or removed"
      },
      "Swap(address,address,uint256,uint256)": {
        "notice": "Emitted when tokens are swapped"
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Adds liquidity to a token pair pool"
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "notice": "Calculates the output amount for a swap"
      },
      "getPrice(address,address)": {
        "notice": "Gets the current price of tokenA in terms of tokenB"
      },
      "getReserves(address,address)": {
        "notice": "Gets reserve amounts for a token pair"
      },
      "liquidityBalances(bytes32,address)": {
        "notice": "Stores liquidity token balances for each user in each pair"
      },
      "pairs(bytes32)": {
        "notice": "Maps token pair hash to pair data"
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Removes liquidity from a token pair pool"
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps exact amount of input tokens for output tokens - VERIFIER COMPATIBLE"
      }
    },
    "notice": "An optimized automated market maker (AMM) for token swapping without fees",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1123,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "pairs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(PairData)1107_storage)"
      },
      {
        "astId": 1130,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "liquidityBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(PairData)1107_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SimpleSwap.PairData)",
        "numberOfBytes": "32",
        "value": "t_struct(PairData)1107_storage"
      },
      "t_struct(PairData)1107_storage": {
        "encoding": "inplace",
        "label": "struct SimpleSwap.PairData",
        "members": [
          {
            "astId": 1102,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "reserveA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1104,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "reserveB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1106,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}